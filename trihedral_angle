from manim import *
import numpy as np


class Corner(Scene):
    def construct(self):

        # –¢–æ—á–∫–∏ | Dots
        A = Dot([4, -1.8, 0], radius=0.05)
        #B = Dot([0, -2.8, 0], radius=0.05)
        #C = Dot([-4, 1.2, 0], radius=0.05)
        #D = Dot([-1, 3.2, 0], radius=0.05)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—é –¥–ª—è —Ç–æ—á–∫–∏ –ê | Sign and create animation for point A
        A_text = MarkupText('<i>A</i>', font_size=30).next_to(A, RIGHT)
        A_group = AnimationGroup(FadeIn(A_text, run_time=3), Create(A, run_time=2))

        # –õ—É—á–∏ –æ–±—Ä–∞–∑—É—é—â–∏–µ —Ç—Ä—ë—Ö–≥—Ä–∞–Ω–Ω—ã–π —É–≥–æ–ª | Rays forming a trihedral angle
        AC = Line([4, -1.8, 0], [-4, 1.2, 0], color=RED)        # AC
        AB = Line([4, -1.8, 0], [0, -2.8, 0], color=RED)        # AB
        AD = Line([4, -1.8, 0], [-1, 3.2, 0], color=RED)        # AD

        # –ü–ª–æ—Å–∫–æ—Å—Ç–∏ | Planes:
        ABC = Polygon([4, -1.8, 0], [0, -2.8, 0], [-4, 1.2, 0])
        ACD = Polygon([4, -1.8, 0], [-4, 1.2, 0], [-1, 3.2, 0])
        ABD = Polygon([4, -1.8, 0], [0, -2.8, 0], [-1, 3.2, 0])
        ABC.set_stroke(width=0)
        ACD.set_stroke(width=0)
        ABD.set_stroke(width=0)

        # –£–≥–æ–ª-–∞–ª—å—Ñ–∞ (–°–æ–∑–¥–∞–Ω–∏–µ + –∞–Ω–∏–º–∞—Ü–∏—è) | Angle-alpha (Creation + Animation)
        AC_AD_angle = Angle(AC, AD, radius=1.8, other_angle=True)
        AC_AD_angle_letter = MathTex(r"\alpha").next_to(AC_AD_angle, (LEFT * 0.9) + (0.0001 * UP))
        AC_AD_group = AnimationGroup(
            Create(AC_AD_angle, run_time=2),
            FadeIn(AC_AD_angle_letter, run_time=2)
        )

        # –£–≥–æ–ª-–±–µ—Ç—Ç–∞ (–°–æ–∑–¥–∞–Ω–∏–µ + –∞–Ω–∏–º–∞—Ü–∏—è) | Angle-betta (Creation + Animation)
        AB_AC_angle = Angle(AB, AC, radius=2.8, other_angle=True)
        AB_AC_angle_letter = MathTex(r"\beta").next_to(AB_AC_angle, LEFT * 0.9)
        AB_AC_group = AnimationGroup(
            Create(AB_AC_angle, run_time=2),
            FadeIn(AB_AC_angle_letter, run_time=2)
        )

        # –£–≥–æ–ª-–≥–∞–º–º–∞ (–°–æ–∑–¥–∞–Ω–∏–µ + –∞–Ω–∏–º–∞—Ü–∏—è) | Angle-Gamma (Creation + Animation)
        AB_AD_angle = Angle(AB, AD, radius=0.8, other_angle=True)
        AB_AD_angle_letter = MathTex(r"\gamma").next_to(AB_AD_angle, LEFT * 0.9)
        AB_AD_group = AnimationGroup(
            Create(AB_AD_angle, run_time=2),
            FadeIn(AB_AD_angle_letter, run_time=2)
        )

        # –ê–Ω–∏–º–∞—Ü–∏—è –ª—É—á–µ–π | Ray animation
        self.play(
            Create(AC, run_time=3),
            Create(AB, run_time=3),
            Create(AD, run_time=3),
        )
        self.wait(1)

        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —É–≥–ª–æ–≤ | Corner Selection Animation
        self.play(
            AC_AD_group,
            AB_AC_group,
            AB_AD_group,
        )
        self.wait(1)

        # –ê–Ω–∏–º–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∏ —Ç–æ—á–∫–∏ –ê | Animation of creation and signature of point A
        self.play(A_group)

        # –£–¥–∞–ª—è–µ–º –ª—É—á AC, –¥–∞–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—ë–º–Ω–æ—Å—Ç—å –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –≤—ã–¥–µ–ª–∏–≤ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –≥—Ä–∞–Ω–∏
        # Delete the AC ray in order to create three-dimensionality later by selecting the edges using animation
        self.play(FadeOut(AC, run_time=1))
        AC = DashedLine([4, -1.8, 0], [-4, 1.2, 0], color=RED)
        self.play(
            Create(ABC.set_fill(BLUE, opacity=0.3), run_time=5),
            Create(ACD.set_fill(GREEN, opacity=0.3), run_time=5),
            Create(ABD.set_fill(RED, opacity=0.3), run_time=5),
            Create(AC,run_time=3)
        )

        # –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —É–≥–ª–∞ ùõæ | View from the position of the angle plane ùõæ
        A_new = Dot([3, -2, 0], radius=0.05)
        A_text_new = MarkupText('<i>A</i>', font_size=30).next_to(A_new, RIGHT)
        A_group_new = AnimationGroup(FadeIn(A_text_new, run_time=3), Create(A_new, run_time=2))

        B_new = Dot([-3, -2, 0], radius=0.05)
        D_new = Dot([-1, 2, 0], radius=0.05)

        # –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è —É–≥–ª–∞ Œ± –∏ –ø–ª–æ—â–∞–¥–∏ –µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        # Create an animation of selecting the angle Œ± and the area of its coverage
        ABD_new = Polygon(
            [A_new.get_x(), A_new.get_y(), 0],  # A
            [B_new.get_x(), B_new.get_y(), 0],  # B
            [D_new.get_x(), D_new.get_y(), 0])  # D
        ABD_new.set_fill(RED, opacity=0.3)
        ABD_new.set_stroke(RED)

        AB_AD_angle_new = Angle(
            Line([A_new.get_x(), A_new.get_y(), 0], [B_new.get_x(), B_new.get_y(), 0]),
            Line([A_new.get_x(), A_new.get_y(), 0], [D_new.get_x(), D_new.get_y(), 0]),
            radius=3, other_angle=True)
        AB_AD_angle_letter_new = MathTex(r"\gamma").next_to(AB_AD_angle_new, LEFT * 0.9)
        AB_AD_group_new = AnimationGroup(
            Create(AB_AD_angle_new, run_time=2),
            FadeIn(AB_AD_angle_letter_new, run_time=2)
        )

        # –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ | Shift left
        self.play(Group(ABC, ACD, ABD, AC, AB, AD,
                  AC_AD_angle, AC_AD_angle_letter,
                  AB_AC_angle, AB_AC_angle_letter,
                  AB_AD_angle, AB_AD_angle_letter,
                  A, A_text
                  ).animate.shift(LEFT*3).scale(0.8))

        # –¢–µ–∫—Å—Ç –∏ –µ–≥–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è | Text and illustration
        a,b,c = 'Œ±', 'Œ≤', 'Œ≥'
        first_text = MarkupText(f'<i>{a} ‚â§ {b} ‚â§ {c}</i>').scale(0.8)
        self.wait(2)

        self.play(Write(first_text.shift(RIGHT*3 + UP)))
        self.wait(2)

        self.play(FadeOut(first_text, run_time=2))
        self.wait(2)

        # –°–¥–≤–∏–≥ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä | Shift back to center
        self.play(Group(ABC, ACD, ABD, AC, AB, AD,
                        AC_AD_angle, AC_AD_angle_letter,
                        AB_AC_angle, AB_AC_angle_letter,
                        AB_AD_angle, AB_AD_angle_letter,
                        A, A_text
                        ).animate.shift(RIGHT * 3).scale(1.2))

        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è | Transformation
        self.play(ReplacementTransform(
            Group(ABC, ACD, ABD, AC, AB, AD,
                  AC_AD_angle, AC_AD_angle_letter,
                  AB_AC_angle, AB_AC_angle_letter,
                  AB_AD_angle, AB_AD_angle_letter,
                  A, A_text
                  ),
            ABD_new
        ), A_group_new
        )

        # –î–µ–ª–∏–º –ø—Ä—è–º—É—é BD –Ω–∞ 10 —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π –¥–ª—è –±—É–¥—É—â–µ–π –ø—Ä–æ–µ–∫—Ü–∏–∏
        # Divide the line BD into 10 equal parts for the future projection
        BD_new_x = np.linspace(B_new.get_x(), D_new.get_x(), 10)
        BD_new_y = np.linspace(B_new.get_y(), D_new.get_y(), 10)

        # –£–≥–æ–ª Œ≤ | Angle Œ≤
        ABC_new = Polygon(
            [A_new.get_x(), A_new.get_y(), 0],  # A
            [BD_new_x[6], BD_new_y[6], 0],      # B
            [B_new.get_x(), B_new.get_y(), 0])  # D
        ABC_new.set_fill(BLUE, opacity=0.3)
        ABC_new.set_stroke(width=0)

        # –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è —É–≥–ª–∞ Œ≤ –∏ –ø–ª–æ—â–∞–¥–∏ –µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        # Create an animation of selecting the angle Œ≤ and the area of its coverage
        AB_AC_angle_new = Angle(
            Line([A_new.get_x(), A_new.get_y(), 0], [B_new.get_x(), B_new.get_y(), 0]),
            Line([A_new.get_x(), A_new.get_y(), 0], [BD_new_x[6], BD_new_y[6], 0]),
            radius=2.2, other_angle=True)
        AB_AC_angle_letter_new = MathTex(r"\beta'").next_to(AB_AC_angle_new, LEFT * 0.9)
        AB_AC_group_new = AnimationGroup(
            Create(AB_AC_angle_new, run_time=2),
            FadeIn(AB_AC_angle_letter_new, run_time=2)
        )

        # –£–≥–æ–ª Œ± | Angle Œ±
        ACD_new = Polygon(
            [A_new.get_x(), A_new.get_y(), 0],  # A
            [BD_new_x[4], BD_new_y[4], 0],      # B
            [B_new.get_x(), B_new.get_y(), 0])  # D
        ACD_new.set_fill(GREEN, opacity=0.3)
        ACD_new.set_stroke(width=0)

        # –°–æ–∑–¥–∞—ë–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è —É–≥–ª–∞ Œ± –∏ –ø–ª–æ—â–∞–¥–∏ –µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        # Create an animation of selecting the angle Œ≤ and the area of its coverage
        AC_AD_angle_new = Angle(
            Line([A_new.get_x(), A_new.get_y(), 0], [B_new.get_x(), B_new.get_y(), 0]),
            Line([A_new.get_x(), A_new.get_y(), 0], [BD_new_x[4], BD_new_y[4], 0]),
            radius=1.4, other_angle=True)
        AC_AD_angle_letter_new = MathTex(r"\alpha'").next_to(AC_AD_angle_new, LEFT * 0.9)
        AC_AD_group_new = AnimationGroup(
            Create(AC_AD_angle_new, run_time=2),
            FadeIn(AC_AD_angle_letter_new, run_time=2)
        )

        # –í—ã–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –æ—Ä—Ç–æ–≥–∞–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ —É–≥–ª–∞ Œ≤ | Select the area of the orthogonal projection of the angle Œ≤
        betta_dash_line = DashedLine([A_new.get_x(), A_new.get_y(), 0], [BD_new_x[6], BD_new_y[6], 0], color=RED)
        self.play(Create(betta_dash_line, run_time=1),
            Create(ABC_new, run_time=2)
        )

        # –í—ã–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –æ—Ä—Ç–æ–≥–∞–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ —É–≥–ª–∞ Œ± | Select the area of the orthogonal projection of the angle Œ±
        alpha_dash_line = DashedLine([A_new.get_x(), A_new.get_y(), 0], [BD_new_x[4], BD_new_y[4], 0], color=RED)
        self.play(Create(alpha_dash_line, run_time=1),
                  Create(ACD_new, run_time=2)
                  )

        self.play(AB_AD_group_new)
        self.play(AB_AC_group_new)
        self.play(AC_AD_group_new)

        # –°–¥–≤–∏–≥ –≤–ª–µ–≤–æ | Shift left
        self.play(Group(
            A_new, A_text_new,
            ABD_new, AB_AD_angle_new, AB_AD_angle_letter_new,
            ABC_new, AB_AC_angle_new, AB_AC_angle_letter_new,
            ACD_new, AC_AD_angle_new, AC_AD_angle_letter_new,
            alpha_dash_line, betta_dash_line
        ).animate.shift(LEFT*3).scale(0.8))
        self.wait(1)

        show_ABC = ABC_new.copy()
        show_ACD = ACD_new.copy()

        show_ABC.set_fill(YELLOW)
        show_ACD.set_fill(YELLOW)

        # –¢–µ–∫—Å—Ç | Text
        second_text = MarkupText(f'<i>{a}‚Ä≤, {b}‚Ä≤ ‚Äì –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —É–≥–ª–æ–≤'
                                 f' {a}, {b} –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å —É–≥–ª–∞ {c}</i>').scale(0.3)

        # –í—ã–¥–µ–ª—è–µ–º —Ñ–∏–≥—É—Ä—ã –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∞–ª—å—Ñ–∞-—à—Ç—Ä–∏—Ö –∏ –±–µ—Ç–∞-—à—Ç—Ä–∏—Ö —É–≥–ª–æ–≤ + –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        # Select shapes to illustrate alpha stroke and beta stroke corners + some text
        self.play(Write(second_text.shift(RIGHT * 3 + UP)))

        self.play(Create(show_ABC, run_time=1))
        self.play(Uncreate(show_ABC, run_time=1))
        self.play(Create(show_ACD, run_time=1))
        self.play(Uncreate(show_ACD, run_time=1))

        self.play(FadeOut(second_text, run_time=2))
        self.wait(2)

        # –¢–µ–∫—Å—Ç –∏ –µ–≥–æ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è | Text and illustration
        third_text = MarkupText(f'<i>–ü–æ-—Å–∫–æ–ª—å–∫—É –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è —É–≥–ª–∞ –≤—Å–µ–≥–¥–∞ –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –µ–≥–æ, '
                                f'–∏–∑ {a}‚Ä≤+{b}‚Ä≤ = {c} –ø–æ–ª—É—á–∏–º {a}+{b} ‚â• {c}.</i>').scale(0.3)
        self.play(Write(third_text.shift(RIGHT * 3 + UP)))
        self.wait(2)
        self.play(FadeOut(third_text, run_time=2))
        
